/*
 * File:   Senor to motor.c
 * Author: marcel
 *
 * Created on February 2, 2020, 8:51 PM
 * compares the loadcells to determine how fast the motors will move,
 * ramp will increase the speed by 1% of duty per iteration
 * sensor to motor compare to find the location on the board using avg x and avg y to get the 
 * x y coords, once the front and back are determined the motor directions will set.
 * 
 */


#include <xc.h>
#include <stdio.h>

float s1 = 100;
float s2 = 150;
float s3 = 50;
float s4 = 25;



float Ramp_fcn(float change, float move) {
    
    float motorspeed, hallspeed;
    if (move == 1 && change == 0 && motorspeed < 81) // checks motor speed and direction limits dtuy to 80%
    {
        motorspeed++;
/*        if(motorspeed*0.85 < hallspeed || motorspeed*1.15 > hallspeed)
        {
            move = 0;
        }*/
    }
    else if (move == 1 && change == 1 && motorspeed > 0) // checks motor speed and direction
    {
        motorspeed--;
    }
    else if (motorspeed == 0 ) // notifiest that motor is at zero 
    {
        change = 0 ;
    }
    
        return motorspeed ;
}


float sensor_to_motor(float s1,float s2,float s3,float s4) {
    float Avgxf, Avgxb, Avgx, Avgy, Avgyl, Avgyr, move, forward, backward, 
             motorspeed;
    int   stby, m1in1, m1in2, m2in1, m2in2, m3in1, m3in2, m4in1, m4in2, change;
    
    
    
    Avgxf = (s1+s2)/2;                  // averages front two sensors
    Avgxb = (s3+s4)/2;                  // averages back two sensors
    Avgyl = (s1+s3)/2;                  // averages left two sensors
    Avgyr = (s2+s4)/2;                  // averages right two sensors                                        
    Avgx  = (Avgxf+Avgxb)/2;            // averages to find the average x                                         
    Avgy  = (Avgyl+Avgyr)/2;            // averages to find the average y     
    
    
    if(Avgxf > (1.1*Avgy))                     // if the forward voltage is higher then select forward motion
    {
        stby = 1 ;
        m1in1 = 0 ; // for odd motors in 1 = 0 and in 2 = 1 moves forward
        m1in2 = 1 ;
        m2in1 = 1 ; // for even motors in 1 = 1 and in 2 = 0 moves forward
        m2in2 = 0 ;
        m3in1 = 0 ;
        m3in2 = 1 ;
        m4in1 = 1 ;
        m4in2 = 0 ;
        move = 1 ;      //movement flag
        if (backward == 1)
        {
            change = 1 ;
        }
        else if (change == 0)
        {
            forward = 1 ;   // forward flag
            backward = 0 ;  // backwards flag
        }
         
    }
    else if (Avgxb > (1.1*Avgy))
    {
        stby = 1 ;
        m1in1 = 1 ;     // for odd motors in 1 = 1 and in 2 = 0 moves forward
        m1in2 = 0 ;
        m2in1 = 0 ;     // for even motors in 1 = 0 and in 2 = 1 moves forward
        m2in2 = 1 ;
        m3in1 = 1 ;
        m3in2 = 0 ;
        m4in1 = 0 ;
        m4in2 = 1 ;
        move = 1 ;      // movement flag
        if (forward == 1) // checks if continuing in same direction
        {
            change = 1 ;
        }
        else if (change == 0)
        {
            forward = 1 ;   // forward flag
            backward = 0 ;  // backwards flag
        }
    }
    else 
    {
        stby = 1 ;
        m1in1 = 1 ;     // for odd motors in 1 = 0 and in 2 = 1 moves forward
        m1in2 = 1 ;
        m2in1 = 1 ;     // for even motors in 1 = 1 and in 2 = 0 moves forward
        m2in2 = 1 ;
        m3in1 = 1 ;
        m3in2 = 1 ;
        m4in1 = 1 ;
        m4in2 = 1 ;
        move = 0 ;      //movement flag
        forward = 0 ;   //forward flag
        backward = 0 ;  //backward flag
    }
    
    motorspeed = Ramp_fcn (change, move);
    
    return motorspeed;
}


